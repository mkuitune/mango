#include "cms_sdl_util.h"

namespace cms {

	std::ostream& SDLKeycodeToStream(std::ostream& os, Sint32 kc){
		// Append to stream based on keycode
		if (kc == 0 || kc >= SDLK_SLEEP) os << "<UNKNOWN>";
		else if (kc < SDLK_CAPSLOCK){
			os << ((char) kc);
		}
		else
		{
			switch (kc){
			case SDLK_CAPSLOCK: os << "CAPSLOCK"; break;
			case SDLK_F1: os << "F1"; break;
			case SDLK_F2: os << "F2"; break;
			case SDLK_F3: os << "F3"; break;
			case SDLK_F4: os << "F4"; break;
			case SDLK_F5: os << "F5"; break;
			case SDLK_F6: os << "F6"; break;
			case SDLK_F7: os << "F7"; break;
			case SDLK_F8: os << "F8"; break;
			case SDLK_F9: os << "F9"; break;
			case SDLK_F10: os << "F10"; break;
			case SDLK_F11: os << "F11"; break;
			case SDLK_F12: os << "F12"; break;
			case SDLK_PRINTSCREEN: os << "PRINTSCREEN"; break;
			case SDLK_SCROLLLOCK: os << "SCROLLLOCK"; break;
			case SDLK_PAUSE: os << "PAUSE"; break;
			case SDLK_INSERT: os << "INSERT"; break;
			case SDLK_HOME: os << "HOME"; break;
			case SDLK_PAGEUP: os << "PAGEUP"; break;
			case SDLK_DELETE: os << "DELETE"; break;
			case SDLK_END: os << "END"; break;
			case SDLK_PAGEDOWN: os << "PAGEDOWN"; break;
			case SDLK_RIGHT: os << "RIGHT"; break;
			case SDLK_LEFT: os << "LEFT"; break;
			case SDLK_DOWN: os << "DOWN"; break;
			case SDLK_UP: os << "UP"; break;
			case SDLK_NUMLOCKCLEAR: os << "NUMLOCKCLEAR"; break;
			case SDLK_KP_DIVIDE: os << "KP_DIVIDE"; break;
			case SDLK_KP_MULTIPLY: os << "KP_MULTIPLY"; break;
			case SDLK_KP_MINUS: os << "KP_MINUS"; break;
			case SDLK_KP_PLUS: os << "KP_PLUS"; break;
			case SDLK_KP_ENTER: os << "KP_ENTER"; break;
			case SDLK_KP_1: os << "KP_1"; break;
			case SDLK_KP_2: os << "KP_2"; break;
			case SDLK_KP_3: os << "KP_3"; break;
			case SDLK_KP_4: os << "KP_4"; break;
			case SDLK_KP_5: os << "KP_5"; break;
			case SDLK_KP_6: os << "KP_6"; break;
			case SDLK_KP_7: os << "KP_7"; break;
			case SDLK_KP_8: os << "KP_8"; break;
			case SDLK_KP_9: os << "KP_9"; break;
			case SDLK_KP_0: os << "KP_0"; break;
			case SDLK_KP_PERIOD: os << "KP_PERIOD"; break;
			case SDLK_APPLICATION: os << "APPLICATION"; break;
			case SDLK_POWER: os << "POWER"; break;
			case SDLK_KP_EQUALS: os << "KP_EQUALS"; break;
			case SDLK_F13: os << "F13"; break;
			case SDLK_F14: os << "F14"; break;
			case SDLK_F15: os << "F15"; break;
			case SDLK_F16: os << "F16"; break;
			case SDLK_F17: os << "F17"; break;
			case SDLK_F18: os << "F18"; break;
			case SDLK_F19: os << "F19"; break;
			case SDLK_F20: os << "F20"; break;
			case SDLK_F21: os << "F21"; break;
			case SDLK_F22: os << "F22"; break;
			case SDLK_F23: os << "F23"; break;
			case SDLK_F24: os << "F24"; break;
			case SDLK_EXECUTE: os << "EXECUTE"; break;
			case SDLK_HELP: os << "HELP"; break;
			case SDLK_MENU: os << "MENU"; break;
			case SDLK_SELECT: os << "SELECT"; break;
			case SDLK_STOP: os << "STOP"; break;
			case SDLK_AGAIN: os << "AGAIN"; break;
			case SDLK_UNDO: os << "UNDO"; break;
			case SDLK_CUT: os << "CUT"; break;
			case SDLK_COPY: os << "COPY"; break;
			case SDLK_PASTE: os << "PASTE"; break;
			case SDLK_FIND: os << "FIND"; break;
			case SDLK_MUTE: os << "MUTE"; break;
			case SDLK_VOLUMEUP: os << "VOLUMEUP"; break;
			case SDLK_VOLUMEDOWN: os << "VOLUMEDOWN"; break;
			case SDLK_KP_COMMA: os << "KP_COMMA"; break;
			case SDLK_KP_EQUALSAS400: os << "KP_EQUALSAS400"; break;
			case SDLK_ALTERASE: os << "ALTERASE"; break;
			case SDLK_SYSREQ: os << "SYSREQ"; break;
			case SDLK_CANCEL: os << "CANCEL"; break;
			case SDLK_CLEAR: os << "CLEAR"; break;
			case SDLK_PRIOR: os << "PRIOR"; break;
			case SDLK_RETURN2: os << "RETURN2"; break;
			case SDLK_SEPARATOR: os << "SEPARATOR"; break;
			case SDLK_OUT: os << "OUT"; break;
			case SDLK_OPER: os << "OPER"; break;
			case SDLK_CLEARAGAIN: os << "CLEARAGAIN"; break;
			case SDLK_CRSEL: os << "CRSEL"; break;
			case SDLK_EXSEL: os << "EXSEL"; break;
			case SDLK_KP_00: os << "KP_00"; break;
			case SDLK_KP_000: os << "KP_000"; break;
			case SDLK_THOUSANDSSEPARATOR: os << "THOUSANDSSEPARATOR"; break;
			case SDLK_DECIMALSEPARATOR: os << "DECIMALSEPARATOR"; break;
			case SDLK_CURRENCYUNIT: os << "CURRENCYUNIT"; break;
			case SDLK_CURRENCYSUBUNIT: os << "CURRENCYSUBUNIT"; break;
			case SDLK_KP_LEFTPAREN: os << "KP_LEFTPAREN"; break;
			case SDLK_KP_RIGHTPAREN: os << "KP_RIGHTPAREN"; break;
			case SDLK_KP_LEFTBRACE: os << "KP_LEFTBRACE"; break;
			case SDLK_KP_RIGHTBRACE: os << "KP_RIGHTBRACE"; break;
			case SDLK_KP_TAB: os << "KP_TAB"; break;
			case SDLK_KP_BACKSPACE: os << "KP_BACKSPACE"; break;
			case SDLK_KP_A: os << "KP_A"; break;
			case SDLK_KP_B: os << "KP_B"; break;
			case SDLK_KP_C: os << "KP_C"; break;
			case SDLK_KP_D: os << "KP_D"; break;
			case SDLK_KP_E: os << "KP_E"; break;
			case SDLK_KP_F: os << "KP_F"; break;
			case SDLK_KP_XOR: os << "KP_XOR"; break;
			case SDLK_KP_POWER: os << "KP_POWER"; break;
			case SDLK_KP_PERCENT: os << "KP_PERCENT"; break;
			case SDLK_KP_LESS: os << "KP_LESS"; break;
			case SDLK_KP_GREATER: os << "KP_GREATER"; break;
			case SDLK_KP_AMPERSAND: os << "KP_AMPERSAND"; break;
			case SDLK_KP_DBLAMPERSAND: os << "KP_DBLAMPERSAND"; break;
			case SDLK_KP_VERTICALBAR: os << "KP_VERTICALBAR"; break;
			case SDLK_KP_DBLVERTICALBAR: os << "KP_DBLVERTICALBAR"; break;
			case SDLK_KP_COLON: os << "KP_COLON"; break;
			case SDLK_KP_HASH: os << "KP_HASH"; break;
			case SDLK_KP_SPACE: os << "KP_SPACE"; break;
			case SDLK_KP_AT: os << "KP_AT"; break;
			case SDLK_KP_EXCLAM: os << "KP_EXCLAM"; break;
			case SDLK_KP_MEMSTORE: os << "KP_MEMSTORE"; break;
			case SDLK_KP_MEMRECALL: os << "KP_MEMRECALL"; break;
			case SDLK_KP_MEMCLEAR: os << "KP_MEMCLEAR"; break;
			case SDLK_KP_MEMADD: os << "KP_MEMADD"; break;
			case SDLK_KP_MEMSUBTRACT: os << "KP_MEMSUBTRACT"; break;
			case SDLK_KP_MEMMULTIPLY: os << "KP_MEMMULTIPLY"; break;
			case SDLK_KP_MEMDIVIDE: os << "KP_MEMDIVIDE"; break;
			case SDLK_KP_PLUSMINUS: os << "KP_PLUSMINUS"; break;
			case SDLK_KP_CLEAR: os << "KP_CLEAR"; break;
			case SDLK_KP_CLEARENTRY: os << "KP_CLEARENTRY"; break;
			case SDLK_KP_BINARY: os << "KP_BINARY"; break;
			case SDLK_KP_OCTAL: os << "KP_OCTAL"; break;
			case SDLK_KP_DECIMAL: os << "KP_DECIMAL"; break;
			case SDLK_KP_HEXADECIMAL: os << "KP_HEXADECIMAL"; break;
			case SDLK_LCTRL: os << "LCTRL"; break;
			case SDLK_LSHIFT: os << "LSHIFT"; break;
			case SDLK_LALT: os << "LALT"; break;
			case SDLK_LGUI: os << "LGUI"; break;
			case SDLK_RCTRL: os << "RCTRL"; break;
			case SDLK_RSHIFT: os << "RSHIFT"; break;
			case SDLK_RALT: os << "RALT"; break;
			case SDLK_RGUI: os << "RGUI"; break;
			case SDLK_MODE: os << "MODE"; break;
			case SDLK_AUDIONEXT: os << "AUDIONEXT"; break;
			case SDLK_AUDIOPREV: os << "AUDIOPREV"; break;
			case SDLK_AUDIOSTOP: os << "AUDIOSTOP"; break;
			case SDLK_AUDIOPLAY: os << "AUDIOPLAY"; break;
			case SDLK_AUDIOMUTE: os << "AUDIOMUTE"; break;
			case SDLK_MEDIASELECT: os << "MEDIASELECT"; break;
			case SDLK_WWW: os << "WWW"; break;
			case SDLK_MAIL: os << "MAIL"; break;
			case SDLK_CALCULATOR: os << "CALCULATOR"; break;
			case SDLK_COMPUTER: os << "COMPUTER"; break;
			case SDLK_AC_SEARCH: os << "AC_SEARCH"; break;
			case SDLK_AC_HOME: os << "AC_HOME"; break;
			case SDLK_AC_BACK: os << "AC_BACK"; break;
			case SDLK_AC_FORWARD: os << "AC_FORWARD"; break;
			case SDLK_AC_STOP: os << "AC_STOP"; break;
			case SDLK_AC_REFRESH: os << "AC_REFRESH"; break;
			case SDLK_AC_BOOKMARKS: os << "AC_BOOKMARKS"; break;
			case SDLK_BRIGHTNESSDOWN: os << "BRIGHTNESSDOWN"; break;
			case SDLK_BRIGHTNESSUP: os << "BRIGHTNESSUP"; break;
			case SDLK_DISPLAYSWITCH: os << "DISPLAYSWITCH"; break;
			case SDLK_KBDILLUMTOGGLE: os << "KBDILLUMTOGGLE"; break;
			case SDLK_KBDILLUMDOWN: os << "KBDILLUMDOWN"; break;
			case SDLK_KBDILLUMUP: os << "KBDILLUMUP"; break;
			case SDLK_EJECT: os << "EJECT"; break;
			case SDLK_SLEEP: os << "SLEEP"; break;
			}
		}
		return os;
	}
}